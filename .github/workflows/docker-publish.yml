name: Docker Image Stable Newest CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  prepare-environment:
    runs-on: ubuntu-latest
    outputs:
      program-version: ${{ steps.set-version.outputs.program-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Check Version Setting
        run: |
          python --version
          pip --version

      - name: Set up Program Version
        id: set-version
        run: |
          python version.py
          PROGRAM_VERSION=$(python version.py)
          echo "program-version=${PROGRAM_VERSION}" >> $GITHUB_OUTPUT
          echo "PROGRAM_VERSION=${PROGRAM_VERSION}" >> $GITHUB_ENV

      - name: Echo Program Version
        run: echo "'${{ env.PROGRAM_VERSION }}' will be used as the version of the program."

  build-jar:
    runs-on: ubuntu-latest
    needs: prepare-environment
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Set Program Version from Previous Job
        run: |
          echo "PROGRAM_VERSION=${{ needs.prepare-environment.outputs.program-version }}" >> $GITHUB_ENV

      - name: Build .jar file
        run: python build_with_docker.py

      - name: Check is Build Success
        run: ls group-center-docker.jar

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: group-center-jar
          path: group-center-docker.jar

  setup-docker:
    runs-on: ubuntu-latest
    needs: build-jar
    outputs:
      acr-region: ${{ steps.set-acr.outputs.acr-region }}
      acr-registry: ${{ steps.set-acr.outputs.acr-registry }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Set up Aliyun Region
        id: set-acr
        env:
          ACR_REGION: cn-shanghai
        run: |
          echo "acr-region=$ACR_REGION" >> $GITHUB_OUTPUT
          echo "acr-registry=registry.${ACR_REGION}.aliyuncs.com" >> $GITHUB_OUTPUT
          echo "ACR_REGION=$ACR_REGION" >> $GITHUB_ENV
          echo "ACR_REGISTRY=registry.${ACR_REGION}.aliyuncs.com" >> $GITHUB_ENV

      - name: Confirm Aliyun ACR
        run: |
          echo "Aliyun ACR REGION=$ACR_REGION"
          echo "Aliyun ACR REGISTRY=$ACR_REGISTRY"

      - name: Login to Aliyun Container Registry (ACR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [prepare-environment, setup-docker]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: group-center-jar
          path: .

      - name: Set up Program Version from Previous Job
        run: |
          echo "PROGRAM_VERSION=${{ needs.prepare-environment.outputs.program-version }}" >> $GITHUB_ENV

      - name: Set up Aliyun Region from Previous Job
        run: |
          echo "ACR_REGION=${{ needs.setup-docker.outputs.acr-region }}" >> $GITHUB_ENV
          echo "ACR_REGISTRY=${{ needs.setup-docker.outputs.acr-registry }}" >> $GITHUB_ENV

      - name: Set up Image Tags
        env:
          GITHUB_SHA: ${{ github.sha }}
          IMAGE_TAG: latest
        run: |
          echo "GITHUB_SHA=$GITHUB_SHA" >> $GITHUB_ENV
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build & Push image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ github.repository }}:latest,
            ${{ github.repository }}:${{ needs.prepare-environment.outputs.program-version }},
            ${{ needs.setup-docker.outputs.acr-registry }}/${{ github.repository }}:latest,
            ${{ needs.setup-docker.outputs.acr-registry }}/${{ github.repository }}:${{ needs.prepare-environment.outputs.program-version }},

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
