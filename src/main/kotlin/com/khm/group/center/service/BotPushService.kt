package com.khm.group.center.service

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory
import com.khm.group.center.config.BotConfig
import com.khm.group.center.datatype.config.webhook.BotGroupConfig
import com.khm.group.center.message.webhook.lark.LarkGroupBot
import com.khm.group.center.message.webhook.wecom.WeComGroupBot
import com.khm.group.center.utils.program.Slf4jKt
import com.khm.group.center.utils.program.Slf4jKt.Companion.logger
import com.khm.group.center.utils.time.DateTimeUtils
import kotlinx.coroutines.runBlocking
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import org.yaml.snakeyaml.Yaml
import java.io.FileInputStream
import java.nio.file.Files
import java.nio.file.Paths

@Service
@Slf4jKt
class BotPushService {

    @Autowired
    private lateinit var objectMapper: ObjectMapper

    private val yamlMapper = ObjectMapper(YAMLFactory())

    // È¢ÑÂÆö‰πâÁöÑbotÁæ§ÈÖçÁΩÆ
    private val botGroups = mutableListOf<BotGroupConfig>()

    companion object {
        private lateinit var instance: BotPushService

        @JvmStatic
        fun pushToAlarmGroup(message: String, urgent: Boolean = false) {
            instance.pushToGroupsInternal(message, "alarm", urgent = urgent)
        }

        @JvmStatic
        fun pushToShortTermGroup(message: String, urgent: Boolean = false) {
            instance.pushToGroupsInternal(message, "shortterm", urgent = urgent)
        }

        @JvmStatic
        fun pushToLongTermGroup(message: String, urgent: Boolean = false) {
            instance.pushToGroupsInternal(message, "longterm", urgent = urgent)
        }

        @JvmStatic
        fun pushToGroup(message: String, groupType: String, urgent: Boolean = false) {
            instance.pushToGroupsInternal(message, groupType, urgent = urgent)
        }

        /**
         * Êé®ÈÄÅpingÂ§±Ë¥•Êä•Ë≠¶ÔºàËâæÁâπÂÖ®‰ΩìÊàêÂëòÔºâ
         * @param machineName Êú∫Âô®ÂêçÁß∞
         * @param host Êú∫Âô®‰∏ªÊú∫
         * @param firstFailureTime Á¨¨‰∏ÄÊ¨°pingÂ§±Ë¥•Êó∂Èó¥
         * @param currentTime ÂΩìÂâçÊó∂Èó¥
         * @param failureDuration Â§±Ë¥•ÊåÅÁª≠Êó∂Èó¥ÔºàÁßíÔºâ
         * @param threshold ÈòàÂÄºÔºàÁßíÔºâÔºåÈªòËÆ§3600ÁßíÔºà1Â∞èÊó∂Ôºâ
         */
        @JvmStatic
        fun pushPingFailureAlarm(machineName: String, host: String, firstFailureTime: Long, currentTime: Long, failureDuration: Long, threshold: Long = 3600) {
            // Ê†ºÂºèÂåñÊó∂Èó¥ÊòæÁ§∫
            val firstFailureTimeFormatted = DateTimeUtils.convertTimestampToDateTime(firstFailureTime)
            val currentTimeFormatted = DateTimeUtils.convertTimestampToDateTime(currentTime)
            val firstFailureTimeStr = DateTimeUtils.formatDateTimeFull(firstFailureTimeFormatted)
            val currentTimeStr = DateTimeUtils.formatDateTimeFull(currentTimeFormatted)
            
            // ËÆ°ÁÆóÂ§±Ë¥•ÊåÅÁª≠Êó∂Èó¥ÁöÑÂèØËØªÊ†ºÂºè
            val failureMinutes = failureDuration / 60
            val failureHours = failureMinutes / 60
            
            val failureDurationReadable = buildString {
                append("${failureDuration}Áßí")
                if (failureMinutes > 0) {
                    append(" (${failureMinutes}ÂàÜÈíü")
                    if (failureHours > 0) {
                        append(", ${failureHours}Â∞èÊó∂")
                    }
                    append(")")
                }
            }
            
            // Ê∑ªÂä†ËâæÁâπÂÖ®‰ΩìÊàêÂëòÁöÑÊ†áËÆ∞
            val atAllTag = "@ÂÖ®‰ΩìÊàêÂëò "
            
            val message = """
            üö® ${atAllTag}PingÂ§±Ë¥•Êä•Ë≠¶
            ====================
            Êú∫Âô®: $machineName
            ‰∏ªÊú∫: $host
            
            üìä Êó∂Èó¥‰ø°ÊÅØ:
            ‚Ä¢ È¶ñÊ¨°Â§±Ë¥•Êó∂Èó¥: $firstFailureTimeStr
            ‚Ä¢ ÂΩìÂâçÊó∂Èó¥: $currentTimeStr
            ‚Ä¢ Â§±Ë¥•ÊåÅÁª≠Êó∂Èó¥: $failureDurationReadable
            ‚Ä¢ Êä•Ë≠¶ÈòàÂÄº: ${threshold}Áßí
            
            ‚ö†Ô∏è Áä∂ÊÄÅ: Êú∫Âô®Â∑≤Ë∂ÖËøá${failureHours}Â∞èÊó∂${failureMinutes % 60}ÂàÜÈíüÊó†Ê≥ïpingÈÄö
            
            üí° Âª∫ËÆÆ: ËØ∑Á´ãÂç≥Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÅÊú∫Âô®ÁîµÊ∫êÂíåÁ≥ªÁªüÁä∂ÊÄÅÔºÅ
            """.trimIndent()
            
            instance.pushToGroupsInternal(message, "alarm", urgent = true)
        }

        /**
         * Êé®ÈÄÅÊó∂Èó¥ÂêåÊ≠•Êä•Ë≠¶
         * @param machineName Êú∫Âô®ÂêçÁß∞
         * @param timeDiff Êó∂Èó¥Â∑ÆÔºàÁßíÔºâ
         * @param threshold ÈòàÂÄºÔºàÁßíÔºâÔºåÈªòËÆ§5ÂàÜÈíü
         */
        @JvmStatic
        fun pushTimeSyncAlarm(machineName: String, clientTimestamp: Long, serverTimestamp: Long, timeDiff: Long, threshold: Long = 300, urgent: Boolean = false) {
            // Ê†ºÂºèÂåñÊó∂Èó¥ÊòæÁ§∫
            val clientTime = DateTimeUtils.convertTimestampToDateTime(clientTimestamp)
            val serverTime = DateTimeUtils.convertTimestampToDateTime(serverTimestamp)
            val clientTimeStr = DateTimeUtils.formatDateTimeFull(clientTime)
            val serverTimeStr = DateTimeUtils.formatDateTimeFull(serverTime)
            
            // ËÆ°ÁÆóÊó∂Èó¥Â∑ÆÁöÑÂèØËØªÊ†ºÂºè
            val timeDiffMinutes = timeDiff / 60
            val timeDiffHours = timeDiffMinutes / 60
            val timeDiffDays = timeDiffHours / 24
            
            val timeDiffReadable = buildString {
                append("${timeDiff}Áßí")
                if (timeDiffMinutes > 0) {
                    append(" (${timeDiffMinutes}ÂàÜÈíü")
                    if (timeDiffHours > 0) {
                        append(", ${timeDiffHours}Â∞èÊó∂")
                        if (timeDiffDays > 0) {
                            append(", ${timeDiffDays}Â§©")
                        }
                    }
                    append(")")
                }
            }
            
            val message = """
            ‚ö†Ô∏è Êó∂Èó¥ÂêåÊ≠•Êä•Ë≠¶
            ====================
            Êú∫Âô®: $machineName
            
            üìä Êó∂Èó¥‰ø°ÊÅØ:
            ‚Ä¢ ÂÆ¢Êà∑Á´ØÊó∂Èó¥: $clientTimeStr
            ‚Ä¢ ÊúçÂä°Âô®Êó∂Èó¥: $serverTimeStr
            ‚Ä¢ Êó∂Èó¥Â∑Æ: $timeDiffReadable
            ‚Ä¢ ÈòàÂÄº: ${threshold}Áßí
            
            üí° Âª∫ËÆÆ: ËØ∑‰ΩøÁî®ntpÊúçÂä°ÂêåÊ≠•Êó∂Èó¥
            """.trimIndent()
            
            instance.pushToGroupsInternal(message, "alarm", urgent = urgent)
        }
    }

    @Value("\${bot.config.file:Config/Bot/bot-groups.yaml}")
    private lateinit var configFile: String

    init {
        // ÂàùÂßãÂåñÈªòËÆ§ÁöÑbotÁæ§ÈÖçÁΩÆ
        initializeDefaultBotGroups()

        // ËÆæÁΩÆÈùôÊÄÅÂÆû‰æã
        instance = this
    }

    private fun ensureConfigLoaded() {
        if (botGroups.size == 3) { // Âè™ÊúâÈªòËÆ§ÈÖçÁΩÆÔºåÈúÄË¶ÅÂä†ËΩΩÈÖçÁΩÆÊñá‰ª∂
            loadBotGroupsFromConfig()
        }
    }

    private fun initializeDefaultBotGroups() {
        // Êä•Ë≠¶Áæ§
        val alarmGroup = BotGroupConfig().apply {
            name = "Êä•Ë≠¶Áæ§"
            type = "alarm"
            // ËøôÈáåÈúÄË¶ÅÈÖçÁΩÆÂÆûÈôÖÁöÑbot key
            weComGroupBotKey = ""
            larkGroupBotId = ""
            larkGroupBotKey = ""
        }

        // Áü≠ÊúüÁæ§
        val shortTermGroup = BotGroupConfig().apply {
            name = "Áü≠ÊúüÁæ§"
            type = "shortterm"
            weComGroupBotKey = ""
            larkGroupBotId = ""
            larkGroupBotKey = ""
        }

        // ÈïøÊúüÁæ§
        val longTermGroup = BotGroupConfig().apply {
            name = "ÈïøÊúüÁæ§"
            type = "longterm"
            weComGroupBotKey = ""
            larkGroupBotId = ""
            larkGroupBotKey = ""
        }

        botGroups.addAll(listOf(alarmGroup, shortTermGroup, longTermGroup))
    }

    fun printBotGroups() {
        ensureConfigLoaded()
        logger.info("Current Bot Groups Configuration:")
        botGroups.forEach { group ->
            logger.info(group.toSummaryString())
        }
    }

    private fun loadBotGroupsFromConfig() {
        try {
            val yaml = Yaml()
            val inputStream = if (configFile.startsWith("classpath:")) {
                val resourcePath = configFile.substringAfter("classpath:")
                this::class.java.classLoader.getResourceAsStream(resourcePath)
            } else {
                FileInputStream(configFile)
            }

            inputStream?.use { stream ->
                val config = yaml.load<Map<String, Any>>(stream)
                val groups = config["bot"] as? Map<*, *>
                val groupList = groups?.get("groups") as? List<*>

                groupList?.forEach { groupConfig ->
                    if (groupConfig is Map<*, *>) {
                        val botGroup = BotGroupConfig().apply {
                            name = (groupConfig["name"] as? String) ?: ""
                            type = (groupConfig["type"] as? String) ?: ""
                            weComGroupBotKey = (groupConfig["weComGroupBotKey"] as? String) ?: ""
                            larkGroupBotId = (groupConfig["larkGroupBotId"] as? String) ?: ""
                            larkGroupBotKey = (groupConfig["larkGroupBotKey"] as? String) ?: ""
                            enable = (groupConfig["enable"] as? Boolean) ?: true
                        }

                        // Êõ¥Êñ∞ÊàñÊ∑ªÂä†ÈÖçÁΩÆ
                        addOrUpdateBotGroup(botGroup)
                    }
                }
            }
        } catch (e: Exception) {
            logger.error("Failed to load bot groups config: ${e.message}")
        }
    }

    /**
     * Ê∑ªÂä†ÊàñÊõ¥Êñ∞botÁæ§ÈÖçÁΩÆ
     */
    fun addOrUpdateBotGroup(config: BotGroupConfig) {
        val existing = botGroups.find { it.name == config.name }
        if (existing != null) {
            existing.type = config.type
            existing.weComGroupBotKey = config.weComGroupBotKey
            existing.larkGroupBotId = config.larkGroupBotId
            existing.larkGroupBotKey = config.larkGroupBotKey
            existing.enable = config.enable
        } else {
            botGroups.add(config)
        }
    }

    /**
     * Ëé∑ÂèñÊâÄÊúâbotÁæ§ÈÖçÁΩÆ
     */
    fun getAllBotGroups(): List<BotGroupConfig> {
        ensureConfigLoaded()
        return botGroups.toList()
    }

    /**
     * Ê†πÊçÆÁ±ªÂûãËé∑ÂèñbotÁæ§ÈÖçÁΩÆ
     */
    fun getBotGroupsByType(type: String): List<BotGroupConfig> {
        ensureConfigLoaded()
        return botGroups.filter { it.type == type && it.isValid() }
    }

    /**
     * Êé®ÈÄÅÊ∂àÊÅØÂà∞ÊåáÂÆöÁ±ªÂûãÁöÑbotÁæ§
     */
    fun pushToBotGroups(type: String, title: String, content: String, urgent: Boolean = false) {
        val targetGroups = getBotGroupsByType(type)

        for (group in targetGroups) {
            pushMessageToGroup(group, title, content, urgent)
        }
    }

    /**
     * Êé®ÈÄÅÊ∂àÊÅØÂà∞ÊåáÂÆöÂêçÁß∞ÁöÑbotÁæ§
     */
    fun pushToBotGroup(groupName: String, title: String, content: String, urgent: Boolean = false) {
        val group = botGroups.find { it.name == groupName && it.isValid() }
        if (group != null) {
            pushMessageToGroup(group, title, content, urgent)
        }
    }

    /**
     * Êé®ÈÄÅÊä•Ë≠¶Ê∂àÊÅØ
     */
    fun pushAlarmMessage(title: String, content: String, urgent: Boolean = false) {
        pushToBotGroups("alarm", title, content, urgent)
    }

    /**
     * Êé®ÈÄÅÂà∞Áü≠ÊúüÁæ§ÔºàÂåÖÂê´‰ΩúÊÅØÊó∂Èó¥ÂàÜÊûêÔºâ
     */
    fun pushToShortTermGroup(title: String, content: String, urgent: Boolean = false) {
        val sleepAnalysisContent = getSleepAnalysisContent("shortterm")
        val fullContent = content + sleepAnalysisContent
        pushToBotGroups("shortterm", title, fullContent, urgent)
    }

    /**
     * Êé®ÈÄÅÂà∞ÈïøÊúüÁæ§ÔºàÂåÖÂê´‰ΩúÊÅØÊó∂Èó¥ÂàÜÊûêÔºâ
     */
    fun pushToLongTermGroup(title: String, content: String, urgent: Boolean = false) {
        val sleepAnalysisContent = getSleepAnalysisContent("longterm")
        val fullContent = content + sleepAnalysisContent
        pushToBotGroups("longterm", title, fullContent, urgent)
    }

    /**
     * Ëé∑Âèñ‰ΩúÊÅØÊó∂Èó¥ÂàÜÊûêÂÜÖÂÆπ
     */
    private fun getSleepAnalysisContent(reportType: String): String {
        return "\n\nüåô ‰ΩúÊÅØÊó∂Èó¥ÂàÜÊûêÂ∑≤ÈõÜÊàêÂà∞Êä•Âëä‰∏≠"
    }

    /**
     * Êé®ÈÄÅÂà∞ÊåáÂÆöÁ±ªÂûãÁöÑÁæ§ÁªÑÔºàÂÜÖÈÉ®ÂÆûÁé∞Ôºâ
     */
    private fun pushToGroupsInternal(message: String, groupType: String, removeEachLineBlank: Boolean = true, urgent: Boolean = false) {
        if (removeEachLineBlank) {
            // ÁßªÈô§ÊØèË°åÁöÑÁ©∫ÁôΩÂ≠óÁ¨¶
            val lines = message.lines()
            val cleanedLines = lines.map { it.trim() }.filter { it.isNotEmpty() }
            val cleanedMessage = cleanedLines.joinToString("\n")
            return pushToGroupsInternal(cleanedMessage, groupType, false, urgent)
        }

        try {
            ensureConfigLoaded()
            val groups = botGroups.filter { it.type == groupType && it.enable && it.isValid() }

            groups.forEach { group ->
                try {
                    // Êé®ÈÄÅÂà∞È£û‰π¶Áæ§
                    if (group.larkGroupBotId.isNotBlank() && group.larkGroupBotKey.isNotBlank()) {
                        val larkBot = LarkGroupBot(group.larkGroupBotId, group.larkGroupBotKey)
                        if (larkBot.isValid()) {
                            larkBot.sendText(message, urgent)
                            logger.info("Successfully pushed to Lark ${groupType} group: ${group.name}, urgent: $urgent")
                        }
                    }

                    // Êé®ÈÄÅÂà∞‰ºÅ‰∏öÂæÆ‰ø°Áæ§
                    if (group.weComGroupBotKey.isNotBlank()) {
                        WeComGroupBot.directSendTextWithUrl(
                            group.weComGroupBotKey, message,
                            null, null
                        )
                        logger.info("Successfully pushed to WeCom ${groupType} group: ${group.name}, urgent: $urgent")
                    }
                } catch (e: Exception) {
                    // ËÆ∞ÂΩïÊé®ÈÄÅÂ§±Ë¥•Êó•Âøó
                    logger.error("Failed to push to ${groupType} group ${group.name}: ${e.message}")
                }
            }
        } catch (e: Exception) {
            logger.error("Failed to push to ${groupType} groups: ${e.message}")
        }
    }

    private fun pushMessageToGroup(group: BotGroupConfig, title: String, content: String, urgent: Boolean = false) {
        val fullContent = "[$title]\n$content"

        runBlocking {
            try {
                // Êé®ÈÄÅ‰ºÅ‰∏öÂæÆ‰ø°
                if (group.weComGroupBotKey.isNotEmpty()) {
                    val weComUrl = WeComGroupBot.getWebhookUrl(group.weComGroupBotKey)
                    WeComGroupBot.directSendTextWithUrl(weComUrl, fullContent, emptyList(), emptyList())
                    logger.info("Sent WeCom message to ${group.name}, urgent: $urgent")
                }

                if (group.larkGroupBotId.isNotEmpty() && group.larkGroupBotKey.isNotEmpty()) {
                    val larkBot = LarkGroupBot(group.larkGroupBotId, group.larkGroupBotKey)
                    larkBot.sendTextWithSilentMode(fullContent, null, urgent)
                    logger.info("Sent Lark message to ${group.name}, urgent: $urgent")
                }
            } catch (e: Exception) {
                logger.error("Failed to send message to ${group.name}: ${e.message}")
            }
        }
    }

    /**
     * Âä†ËΩΩBotÈÖçÁΩÆ
     */
    private fun loadBotConfig(): BotConfig {
        val configFile = Paths.get("Config/Bot/bot-groups.yaml")
        val yamlContent = Files.readString(configFile)
        return yamlMapper.readValue(yamlContent, BotConfig::class.java)
    }
}
